version: 0.2

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo Installing required tools...
      - mvn --version
      - aws --version

  pre_build:
    commands:
      - echo "Tạo file application.properties từ biến môi trường"
      - |
        cat <<EOF > src/main/resources/application.properties
        spring.application.name=nhom13
        
        spring.datasource.url=$DB_URL
        spring.datasource.username=$DB_USER
        spring.datasource.password=$DB_PASS
        
        spring.jpa.hibernate.ddl-auto=none
        spring.jpa.show-sql=true
        spring.jpa.properties.hibernate.format_sql=true
        spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
        
        spring.servlet.multipart.max-file-size=2MB
        
        cloudinary.cloud_name=$CLOUD_NAME
        cloudinary.api_key=$CLOUD_API_KEY
        cloudinary.api_secret=$CLOUD_API_SECRET
        
        # Logging configuration
        logging.level.com.mycar.nhom13.Config=DEBUG
        logging.level.root=INFO
        EOF
      - echo "Running Maven build..."
      - mvn clean install -DskipTests
      - echo Logging in to Amazon ECR...
      - REPOSITORY_URI=490863269756.dkr.ecr.us-east-1.amazonaws.com/javarechie-registry
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
      - echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"javarechie-registry","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - DOCKER_CONTAINER_NAME=javarechie-registry
      - echo $DOCKER_CONTAINER_NAME
      - echo printing imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
    - target/course-service.jar